# 트리는 그래프에 속한다!! 
# 다시 말 해서 트리는 특수한 그래프이다.
# 그래프는 루트도 없음!! 

# ⭐️ 그래프 어디서 써? ⭐️
# 지역과 지역을 오가는 통로를 설명할 때
# ex) 지하철 노선도, 고속도로, A에서 B까지 가고싶을 때! 
# ex) 네트워크 망, 인터넷 전송속도... 등등 
# ex) 갈 수 있는 지 없는 지 계산..! 

# ⭐️ 그래프 용어 ⭐️
# -1) 트리의 노드 => 그래프의 정점 
# -2) 간선은 똑같음


# ⭐️ 그래프 특징 ⭐️
# -1) 트리와는 다르게 싸이클이 존재한다. 
# - 지역 이동을 생각하면 쉬워 a -> b -> c -> a로 다시 돌아올 수 있음 
# -2)

# ⭐️ 그래프 종류 ⭐️
# 무방향 그래프 : 화살표가 없는 그래프(양쪽으로 모두 이동할 수 있음)
# -- 양방향 모두 갈 수 있는 도로! 
# 방향 그래프 : 화살표가 있어서 화살표 대로 만 이동할 수 있는 그래프
# -- 일방통행 도로! (A에서 B로는 갈 수 있지만 B에서 A로는 갈 수 없다)
# 🔴 트리는 방향 그래프이다 => 항상 위에서 아래로 향하기 때문이다 🔴

# 가중치 그래프 : 간선에 숫자로 가중치가 존재하는 그래프

# 즉, 가중치 방향 그래프가 될 수 있고, 가중치 무방향 그래프가 될 수 있음 



# ⭐️⭐️ 그래프 구현 방법 ⭐️⭐️
# 2차원 배열로 표현 
# 정점의 개수만큼 n*n배열로 표현 
# 1과 연결이 되었으면 

# 즉 가중치가 없는 그래프! 
graph = [
    [0,1,1,1], # 1과 2 3 4가 연결(1과 1로는 연결 x) 
    [1,0,0,0], # 2는 1만 연결됨 
    [1,0,0,1], # 3은 1과 4로만 연결 됨! 
    [1,0,1,0], # 4는 1과 3이랑만 연결됨! 
]



# ⭐️⭐️ 그래프 탐색 알고리즘 ⭐️⭐️
# BFS(Breadth First Search) : 너비 우선 탐색 : queue
# DFS(Depth First Search) : 깊이 우선 탐색 : stack

# ⭐️⭐️ 그래프 지역 간 최단 경로 구하기 ⭐️⭐️
# 다익스트라 
# 벨만-포드 
# 플로이드
