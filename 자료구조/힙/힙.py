# 힙이란? 
# 데이터에서 최댓값과 최솟값을 빠르게 찾기 위하여 고안된 완전 이진 트리
# 완전 이진 트리란? => 모든 노드의 자식이 2마리..! 

# ❗️완전 이진 트리 그래프 형태❗️
# ❗️최댓값, 최솟값을 빠르게 찾는다❗️
# 노드를 삽입할 때 최하단 왼쪽 노드부터 차례대로 삽입한다. 

# 왜 힙이라는 자료구조를 사용하는가? 

# 목적? => 최댓값, 최솟값 구하기

# 👉 배열에서 최댓값, 최솟값을 구하려면 O(n)이 걸림 🔴힙은 logN으로 확확 줄어듦🔴
# 👉 앞으로 최댓값, 최솟값 구하려면 모든 데이터를 힙(완전 이진트리)에 넣고 구한다


# << 힙의 구조 >> 
# 1. 최댓값을 구하기 위한 ❗️최대 힙❗️ 
# 2. 최솟값을 구하기 위한 ❗️최소 합❗️ 

# 최대 힙 특징 (가장 최댓값이 루트로 오는 형태..!)
# - 각 노드의 숫자는 자식 노드의 값보다 크거나 같다. 
# 10의 자식이 5 6이면 안 돼! 4 5나 5 5는 돼!  
# ❗️가장 위가 가장 큰 값을 갖고있다❗️
# 모두 탐색 할 필요없이 가장 루트 노드값만 빼오면 된다. 
# 하지만 노드에 값을 구성하는 시간 + 루트 노드값을 가져오는 시간 logn

# 최소 힙 
# 반대.. 노드가 자식의 합보다 작거나 같음(최대가 두 자식의 합이 될 수 있다)
# ❗️가장 위에가 가장 작은 값을 가지고 있다❗️ 

# 파이썬 최소 힙 

import heapq

heap = [] # 힙 구조 

for i in range(4):
    number = int(input()) # 숫자를 하나 입력을 받음..! 
    heapq.heappush(heap, number)

print(heap)

print(heapq.heappop(heap))
print(heapq.heappop(heap))
print(heapq.heappop(heap))
print(heapq.heappop(heap))

# 연산의 개수 
# 9만큼 반복문 돌려주고

# 0이면 heapq.heappop(heap)해주면 가장 작은 값이 빠진다
# 만약 빼기전에 배열이 0이면 그냥 0을 출력하면 돼! 

# 0이 아니면, heap에 저 값을 넣느다...! 
