# 매우 매우 중요함! 
# 가장 난이도가 높음! 


# ❗️GRAPH => 정점과 간선으로 이루어진 자료구조❗️
# 실제 세계의 현상이나 사물을 정점(트리에서의 노드)과 간선으로 표현하기 위해 사용한다.
# ex) 어떤 구역과 고속도로 (길을 빠르게 가기 위한 최단거리 등등....)

# 그래프 종류 

# - 무방향 그래프(무방향 그래프가 이제 연결 || 비연결로 나뉜다. ) : 방향이 없는 그래프 
# --> 노드는 양 방향 모두 갈 수 있음 
# --> 보통 (a, b) (b, a)로 표현한다. 

# - 방향 그래프 (❗️트리도 방향 그래프 일종이다❗️)


# - 가중치 그래프 or network
# 간선에 비용 or 가중치가 할당된 그래프 
# ex) 고속도로 각 지역마다의 거리 등등으로 표현될 수 있음 

# 연결 그래프 
# 무방향 그래프에서 모든 정점에 대한 간선이 존재 할 경우

# 비연결 그래프 
# 무방향 그래프에서 특정 노드에 대해 경로가 존재하지 않는 경우

# 완전 그래프 
# ❗️그래프의 모든 노드가 서로 연결되어 있는 그래프❗️
# 모두가 날 가리킴(각각)
# 즉, 1 2 3 4가 있으면 
# 1을 2 3 4가 가리키고,
# 나머지도!! 
# 즉, ❗️어디로든 갈 수 있다❗️


# 무방향 방향 가중치 이 세 개만 제대로 봐도 무방해! 


# 그래프와 트리의 차이 

# 정의 
# 트리 : 방향 그래프의 일종, 방향성이 있는 비순환(싸이클 없음) 그래프 
# 그래프 : 노드와 노드를 연결하는 간선으로 표현하는 자료구조 (싸이클 존재가능)

# 방향성 
# 트리는 방향 그래프니까 방향이 무조건 있음(자식끼리는 없음)
# 그래프는 방향 무방향 둘 다 가능함 

# 사이클 
# 트리는 없음 
# 그래프는 있을 수 있음 

# 부모 자식 관계
# 그래프는 부모 자식관계가 없음 
# 트리는 존재함 



# 그래프 탐색 알고리즘 (2가지)
# 탐색을 하는 방법 => 2가지가 있음

# 1. BFS(Breadth First Search) : 너비 우선 탐색
# -> 지그재그식 탐색 (같은 level 노드들을 싹 다 탐방하고, 그 다음 level로)
# -> queue를 사용한다

# 2. DFS(Depth First Search) : 깊이 우선 탐색
# 더 이상 자식이 없으면 뒤로가기를 함(자식이 나올 때 까지)
# 뒤로가기??? ==> stack을 사용함



# 파이썬에서 그래프 표현 방법! 
# 딕셔너리 사용한다! 



GRAPH = {
    'A' : ['B', 'C'], # A정점과 연결 돼 있는 정점은 BC이다.
    'B' : ['A', 'D'], 
    'C' : ['A', 'G', 'H', 'I'],
    'D' : ['B', 'E', 'F'],
    'E' : ['D'], 
    'F' : ['D'],
    'G' : ['C'],
    'H' : ['C'],
    'I' : ['C', 'J'],
    'J' : ['I']
}
# 각 정점 : 각 정점과 연결된 정점
print(GRAPH)